{"version":3,"sources":["components/Form.js","components/Result.js","components/App.js","serviceWorker.js","index.js"],"names":["Form","props","react_default","a","createElement","type","value","onChange","change","placeholder","Result","_props$weather","weather","error","city","temp","pressure","wind","date","sunrise","sunset","content","Fragment","Date","toLocaleTimeString","className","concat","App","state","InputChange","e","_this","setState","target","prevProps","prevState","_this2","this","length","API","fetch","method","then","resp","ok","Error","json","data","d","toLocaleString","main","speed","sys","catch","err","console","log","components_Form","src_components_Result","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gRAaeA,EAZF,SAAAC,GACT,OACIC,EAAAC,EAAAC,cAAA,gBACIF,EAAAC,EAAAC,cAAA,SAAOC,KAAO,OACdC,MAAOL,EAAMK,MACbC,SAAUN,EAAMO,OAChBC,YAAY,mBC4BTC,SAjCA,SAACT,GAAU,IAAAU,EAGsCV,EAAMW,QAA3DC,EAHeF,EAGfE,MAAMC,EAHSH,EAGTG,KAAKC,EAHIJ,EAGJI,KAAKC,EAHDL,EAGCK,SAASC,EAHVN,EAGUM,KAAKC,EAHfP,EAGeO,KAAKC,EAHpBR,EAGoBQ,QAAQC,EAH5BT,EAG4BS,OAC9CC,EAAU,KAcd,OAbIR,GAASC,IACTO,EACInB,EAAAC,EAAAC,cAACF,EAAAC,EAAMmB,SAAP,KACIpB,EAAAC,EAAAC,cAAA,yBAAiBU,GACjBZ,EAAAC,EAAAC,cAAA,0BAAkBW,EAAlB,UACAb,EAAAC,EAAAC,cAAA,6BAAgBY,EAAhB,QACAd,EAAAC,EAAAC,cAAA,oBAAYa,EAAZ,QACAf,EAAAC,EAAAC,cAAA,yCAAoB,IAAImB,KAAe,IAAVJ,GAAgBK,sBAC7CtB,EAAAC,EAAAC,cAAA,yCAAoB,IAAImB,KAAc,IAATH,GAAeI,sBAC5CtB,EAAAC,EAAAC,cAAA,mCAAsBc,KAK9BhB,EAAAC,EAAAC,cAAA,OAAKqB,UAAU,UACVZ,EAAK,0BAAAa,OAA6BZ,GAASO,KCqGzCM,oNAhHbC,MAAO,CACLtB,MAAO,GACPY,KAAM,GACNJ,KAAM,GACNC,KAAM,GACNC,SAAU,GACVC,KAAM,GACNE,QAAS,GACTC,OAAQ,GACRP,MAAO,MAGTgB,YAAc,SAACC,GACbC,EAAKC,SAAS,CACZ1B,MAAOwB,EAAEG,OAAO3B,wIA0CD4B,EAAWC,GAAU,IAAAC,EAAAC,KAItC,GAA8B,IAA3BA,KAAKT,MAAMtB,MAAMgC,QACjBH,EAAU7B,QAAU+B,KAAKT,MAAMtB,MAAM,CACtC,IAAMiC,EAAG,qDAAAb,OAAwDW,KAAKT,MAAMtB,MAAnE,WAAAoB,OAnEA,mCAmEA,iBAETc,MAAMD,EAAI,CAACE,OAAQ,QAClBC,KAAK,SAAAC,GACJ,GAAGA,EAAKC,GACN,OAAOD,EAET,MAAME,MAAM,iDAEbH,KAAK,SAAAC,GAAI,OAAIA,EAAKG,SAClBJ,KAAK,SAAAK,GACJ,IAAMC,GAAE,IAAIzB,MAAO0B,iBACnBb,EAAKJ,SAAS,CAEZnB,OAAO,EACPK,KAAM8B,EACNlC,KAAMsB,EAAKR,MAAMtB,MACjBS,KAAMgC,EAAKG,KAAKnC,KAChBC,SAAU+B,EAAKG,KAAKlC,SACpBC,KAAM8B,EAAK9B,KAAKkC,MAChBhC,QAAS4B,EAAKK,IAAIjC,QAClBC,OAAQ2B,EAAKK,IAAIhC,WAIpBiC,MAAM,SAAAC,GACLC,QAAQC,IAAIF,GACZlB,EAAKJ,SAAS,CACZnB,OAAO,EACPC,KAAMsB,EAAKR,MAAMtB,4CAMvB,OACEJ,EAAAC,EAAAC,cAAA,OAAKqB,UAAU,OAEfvB,EAAAC,EAAAC,cAACqD,EAAD,CAAMnD,MAAO+B,KAAKT,MAAMtB,MACtBE,OAAQ6B,KAAKR,cAHf,IAMA3B,EAAAC,EAAAC,cAACsD,EAAD,CACE9C,QAAWyB,KAAKT,gBA5GN+B,cCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhE,EAAAC,EAAAC,cAAC+D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,KAAK,SAAA+B,GACjCA,EAAaC","file":"static/js/main.9f96069f.chunk.js","sourcesContent":["import React from 'react';\r\nconst Form = props => {\r\n    return(\r\n        <form > {/* onSubmit={props.submit} */}\r\n            <input type = \"text\" \r\n            value={props.value}\r\n            onChange={props.change} //reakcaj na zmianę stanu\r\n            placeholder=\"Wpisz miasto\"\r\n            />\r\n            {/* <button>Wyszukaj miasto</button> */}\r\n        </form>\r\n    );\r\n}\r\nexport default Form;","import React from 'react';\r\nimport './Result.css' // import pliku css\r\nconst Result = (props) => {\r\n    //destrukturyzacja\r\n    \r\n    const {error,city,temp,pressure,wind,date,sunrise,sunset} = props.weather;\r\n    let content = null;\r\n    if(!error && city){\r\n        content = (\r\n            <React.Fragment>\r\n                <h4>Pogoda dla: {city}</h4>\r\n                <h4>Temperatura: {temp} &#176;C</h4>\r\n                <h4>Ciśnienie: {pressure} hPa</h4>\r\n                <h4>Wiatr: {wind} m/s</h4>\r\n                <h4>Wschód słońca: {new Date(sunrise * 1000).toLocaleTimeString()}</h4>\r\n                <h4>Zachód słońca: {new Date(sunset * 1000).toLocaleTimeString()}</h4>\r\n                <h4>Dzień i godzina: {date}</h4>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n    return(\r\n        <div className=\"result\">\r\n            {error ? `nie znaleziono miasta: ${city}` : content}\r\n        </div>\r\n\r\n        // <React.Fragment>\r\n        //     {error ? `nie znaleziono miasta: ${city}` : content}\r\n        //     <div>Pogoda dla: {city}</div>\r\n        //     <div>Temperatura: {temp}</div>\r\n        //     <div>Ciśnienie: {pressure}</div>\r\n        //     <div>Wiatr: {wind}</div>\r\n        //     <div>{String(props.weather.error)}</div> \r\n        // </React.Fragment>\r\n    );\r\n}\r\nexport default Result;","import React, {Component} from 'react';\nimport Form from './Form';\nimport Result from './Result';\nimport './App.css';\n\n//klucz API\nconst APIKey = \"c1e9826fe7cbbcb53884ce4e27206e06\";\n\nclass App extends Component {\n\n  //stan\n  state ={\n    value: \"\",\n    date: \"\",\n    city: \"\",\n    temp: \"\",\n    pressure: \"\",\n    wind: \"\",\n    sunrise: \"\",\n    sunset: \"\",\n    error: \"\",\n  }\n  //zmiana stanu\n  InputChange = (e) =>{\n    this.setState({\n      value: e.target.value\n    })\n  }\n  // CitySubmit = (e) => {\n  //   e.preventDefault()\n  //   const API = `https://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&appid=${APIKey}&units=metric`;\n    \n  //   fetch(API)\n  //   .then(resp => {\n  //     if(resp.ok){\n  //      return resp \n  //     }\n  //     throw Error(\"nie udało się uzyskać danych\")\n  //   })\n  //   .then(resp => resp.json())\n  //   .then(data => {\n  //     const d=new Date().toLocaleString();\n  //     this.setState({\n        \n  //       error: false,\n  //       date: d,\n  //       city: this.state.value,\n  //       temp: data.main.temp,\n  //       pressure: data.main.pressure,\n  //       wind: data.wind.speed,\n  //       sunrise: data.sys.sunrise,\n  //       sunset: data.sys.sunset,\n\n  //     })\n  //     //console.log(data)\n  //   })\n  //   .catch(err => {\n  //     console.log(err)\n  //     this.setState({\n  //       error: true,\n  //       city: this.state.value\n  //     })\n  //   })\n  // }\n  componentDidMount(){\n    //tylko raz\n  }\n  componentDidUpdate(prevProps, prevState){\n    //przy kazdej zmianie\n\n\n    if(this.state.value.length ===0) return\n    if(prevState.value !== this.state.value){\n      const API = `https://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&appid=${APIKey}&units=metric`;\n    \n      fetch(API,{method: 'GET'})\n      .then(resp => {\n        if(resp.ok){\n          return resp \n        }\n        throw Error(\"nie udało się uzyskać danych\")\n      })\n      .then(resp => resp.json())\n      .then(data => {\n        const d=new Date().toLocaleString();\n        this.setState({\n        \n          error: false,\n          date: d,\n          city: this.state.value,\n          temp: data.main.temp,\n          pressure: data.main.pressure,\n          wind: data.wind.speed,\n          sunrise: data.sys.sunrise,\n          sunset: data.sys.sunset,\n        })\n      //console.log(data)\n      })\n      .catch(err => {\n        console.log(err)\n        this.setState({\n          error: true,\n          city: this.state.value\n        })\n      })\n    }\n  }\n  render(){\n    return(\n      <div className=\"App\">\n \n      <Form value={this.state.value} \n        change={this.InputChange}\n        // submit={this.CitySubmit}\n      /> {/* przekazywanie wlasciwosci */}\n      <Result\n        weather = {this.state}\n      />\n      </div>\n    \n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}